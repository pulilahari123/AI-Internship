{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMVv+VTCC0lVOEW+jqS6b+x",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pulilahari123/AI-Internship/blob/main/TIC-TAC-TOE\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "# Print the board\n",
        "def print_board(board):\n",
        "    for row in [board[i:i+3] for i in range(0, 9, 3)]:\n",
        "        print(\"| \" + \" | \".join(row) + \" |\")\n",
        "\n",
        "# Check for a winner\n",
        "def check_winner(board):\n",
        "    win_combinations = [\n",
        "        [0, 1, 2], [3, 4, 5], [6, 7, 8], # rows\n",
        "        [0, 3, 6], [1, 4, 7], [2, 5, 8], # columns\n",
        "        [0, 4, 8], [2, 4, 6]             # diagonals\n",
        "    ]\n",
        "    for combo in win_combinations:\n",
        "        if board[combo[0]] == board[combo[1]] == board[combo[2]] != \" \":\n",
        "            return board[combo[0]]\n",
        "    return None\n",
        "\n",
        "# Check if moves are left\n",
        "def is_moves_left(board):\n",
        "    return \" \" in board\n",
        "\n",
        "# Minimax algorithm\n",
        "def minimax(board, depth, is_maximizing):\n",
        "    winner = check_winner(board)\n",
        "    if winner == \"O\":\n",
        "        return 1\n",
        "    elif winner == \"X\":\n",
        "        return -1\n",
        "    elif not is_moves_left(board):\n",
        "        return 0\n",
        "\n",
        "    if is_maximizing:\n",
        "        best_score = -math.inf\n",
        "        for i in range(9):\n",
        "            if board[i] == \" \":\n",
        "                board[i] = \"O\"\n",
        "                score = minimax(board, depth + 1, False)\n",
        "                board[i] = \" \"\n",
        "                best_score = max(best_score, score)\n",
        "        return best_score\n",
        "    else:\n",
        "        best_score = math.inf\n",
        "        for i in range(9):\n",
        "            if board[i] == \" \":\n",
        "                board[i] = \"X\"\n",
        "                score = minimax(board, depth + 1, True)\n",
        "                board[i] = \" \"\n",
        "                best_score = min(best_score, score)\n",
        "        return best_score\n",
        "\n",
        "# Find the best move for AI\n",
        "def best_move(board):\n",
        "    best_score = -math.inf\n",
        "    move = None\n",
        "    for i in range(9):\n",
        "        if board[i] == \" \":\n",
        "            board[i] = \"O\"\n",
        "            score = minimax(board, 0, False)\n",
        "            board[i] = \" \"\n",
        "            if score > best_score:\n",
        "                best_score = score\n",
        "                move = i\n",
        "    return move\n",
        "\n",
        "# Main game loop\n",
        "def play_game():\n",
        "    board = [\" \" for _ in range(9)]\n",
        "    print(\"Welcome to Tic-Tac-Toe!\")\n",
        "    print_board(board)\n",
        "\n",
        "    while True:\n",
        "        # Human move\n",
        "        move = int(input(\"Enter your move (1-9): \")) - 1\n",
        "        if board[move] != \" \":\n",
        "            print(\"Invalid move, try again.\")\n",
        "            continue\n",
        "        board[move] = \"X\"\n",
        "\n",
        "        if check_winner(board) or not is_moves_left(board):\n",
        "            break\n",
        "\n",
        "        # AI move\n",
        "        ai_move = best_move(board)\n",
        "        board[ai_move] = \"O\"\n",
        "\n",
        "        print_board(board)\n",
        "\n",
        "        if check_winner(board) or not is_moves_left(board):\n",
        "            break\n",
        "\n",
        "    print_board(board)\n",
        "    winner = check_winner(board)\n",
        "    if winner:\n",
        "        print(f\"{winner} wins!\")\n",
        "    else:\n",
        "        print(\"It's a draw!\")\n",
        "\n",
        "# Start the game\n",
        "play_game()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xdKJAwyAtbga",
        "outputId": "b948fde3-ed72-4ffe-ecaf-e1efb38215be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to Tic-Tac-Toe!\n",
            "|   |   |   |\n",
            "|   |   |   |\n",
            "|   |   |   |\n",
            "Enter your move (1-9): 5\n",
            "| O |   |   |\n",
            "|   | X |   |\n",
            "|   |   |   |\n",
            "Enter your move (1-9): 4\n",
            "| O |   |   |\n",
            "| X | X | O |\n",
            "|   |   |   |\n",
            "Enter your move (1-9): 3\n",
            "| O |   | X |\n",
            "| X | X | O |\n",
            "| O |   |   |\n",
            "Enter your move (1-9): 8\n",
            "| O | O | X |\n",
            "| X | X | O |\n",
            "| O | X |   |\n",
            "Enter your move (1-9): 9\n",
            "| O | O | X |\n",
            "| X | X | O |\n",
            "| O | X | X |\n",
            "It's a draw!\n"
          ]
        }
      ]
    }
  ]
}